import sys
import platform
import os
import glob
import zipfile


def get_version():
    if len(sys.argv) != 2:
        print("Usage: python get_block_id.py <Minecraft version>")
        sys.exit(1)
    return sys.argv[1]


def get_jar_path(version):
    if platform.system() == "Windows":
        minecraft_dir = os.path.expanduser("~/AppData/Roaming/.minecraft")
    else:
        minecraft_dir = os.path.expanduser("~/.minecraft")
    return os.path.join(minecraft_dir, "versions", version, f"{version}.jar")


def is_version_1_13_or_later(version):
    major, minor, _patch = map(int, version.split("."))
    if major < 1:
        return False
    if major == 1 and minor < 13:
        return False
    return True


def extract_block_ids(minecraft_jar_path, minecraft_dir, version):
    extracted_path = os.path.join(minecraft_dir, "versions", version)
    try:
        with zipfile.ZipFile(minecraft_jar_path, "r") as jar:
            jar.extractall(extracted_path)
            blockstates_dir = os.path.join(
                extracted_path, "assets/minecraft/blockstates"
            )
            local_block_ids = []
            json_files = glob.glob(os.path.join(blockstates_dir, "*.json"))
            for file_path in json_files:
                block_id = os.path.splitext(os.path.basename(file_path))[0]
                local_block_ids.append(block_id)
    except (FileNotFoundError, zipfile.BadZipFile) as e:
        print(f"\nError: {e}\n")
        print(f"Are you sure you have Minecraft {version}? Try another version.")
        sys.exit(1)
    return sorted(local_block_ids)


def save_to_file(block_ids, output_path, version, version_path):
    with open(output_path, "w", encoding="utf-8") as f:
        f.write(f"# Block ID list of Minecraft {version}\n")
        f.write(f"#   auto-generated by get_block_id.py as block_{version_path}.py\n\n")
        for block_id in block_ids:
            formatted_id = (
                block_id.upper().replace("MINECRAFT:", "") + f' = "{block_id}"'
            )
            f.write(formatted_id + "\n")


def main():
    version = get_version()
    version_path = version.replace(".", "_")
    minecraft_jar_path = get_jar_path(version)

    if is_version_1_13_or_later(version):
        block_id_list = extract_block_ids(
            minecraft_jar_path, os.path.dirname(minecraft_jar_path), version
        )
        script_dir = os.path.dirname(os.path.abspath(__file__))
        file_name = f"block_{version_path}.py"
        output_file = os.path.join(script_dir, file_name)
        save_to_file(block_id_list, output_file, version, version_path)
        print(f"Block IDs have been written to:\n{output_file}")
    else:
        print("This version is not supported.")
        sys.exit(1)


if __name__ == "__main__":
    main()
